Question 1 - Detecting Potential Payment Fraud in an Online Marketplace
-----------------------------------------------------------------------

create table transactions(
	transaction_id int primary key,
	user_id int,
	payment_method varchar(255),
	amount decimal(10,2),
	transaction_date date,
	status varchar(255)
	);

INSERT INTO transactions (transaction_id, user_id, payment_method, amount, transaction_date, status) VALUES
(101, 202, 'Credit Card', 200.43, '2025-02-16', 'Completed'),
(102, 203, 'Netbanking', 3233.10, '2025-03-11', 'Failed'),
(103, 203, 'Netbanking', 1195.35, '2025-02-24', 'Failed'),
(104, 203, 'Debit Card', 376.11, '2025-03-10', 'Failed'),
(105, 203, 'Netbanking', 112.01, '2025-04-04', 'Failed'),
(106, 203, 'Credit Card', 111.10, '2025-09-12', 'Failed'),
(107, 203, 'Debit Card', 2344.50, '2025-10-03', 'Failed');

ANSWER
------
select user_id ,count (status) as failed_transactions,count(distinct payment_method) as distinct_payment_method
from transactions
where status ='Failed'
group by user_id;

Question 2 - : Average Response Time
------------------------------------

CREATE TABLE support_tickets(
id int primary key,
customer_id int,
created_at varchar(19),
resolved_at varchar(19)
);

INSERT INTO support_tickets (id, customer_id, created_at, resolved_at) VALUES
(1, 1, '2023-12-21 05:42:00', '2024-01-01 05:42:00'),
(2, 2, '2023-07-08 14:22:00', NULL),
(3, 3, '2023-05-22 08:54:00', '2023-06-17 08:54:00');

ANSWER
------
SELECT
    ROUND(AVG(EXTRACT(EPOCH FROM (TO_TIMESTAMP(resolved_at, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(created_at, 'YYYY-MM-DD HH24:MI:SS'))) / 3600),2) 
    AS average_response_time
FROM support_tickets
WHERE resolved_at IS NOT NULL;

OR

SELECT
    ROUND(AVG(EXTRACT(EPOCH FROM (resolved_at::timestamp - created_at::timestamp))/3600),2) 
    AS average_response_time
FROM support_tickets
WHERE resolved_at IS NOT NULL;

Question 3 - Highest-Spending Customers per City
------------------------------------------------
create table orders(
id int primary key,
name varchar(255),
city varchar(255)
);


create table orders(
id int primary key,
customer_id int references customers(id),
amount decimal(10,2)
)

INSERT INTO customers (id, name, city) VALUES
(1, 'Customer 1', 'Los Angeles'),
(2, 'Customer 2', 'Chicago'),
(3, 'Customer 3', 'Chicago');

INSERT INTO orders (id, customer_id, amount) VALUES
(1, 1, 150.75),
(2, 2, 230.50),
(3, 3, 345.25);


Question 4 - : E-commerce Product Request Report
------------------------------------------------

create table products(
id int not null primary key,
name varchar(255),
category varchar(255),
is_available smallint
)

create table requests(
product_id int references products(id),
client_email varchar(255)
)

INSERT INTO products (id, name, category, is_available) VALUES
(1, 'PromoPro', 'beauty products', 1),
(2, 'AdVantage', 'outdoor gear', 1),
(3, 'MarketMagnet', 'sports equipment', 1),
(5, 'AdBlitz', 'beauty products', 0);

insert into requests (product_id,client_email) values
(1,'fskhg'),
(1,'sdfgfg'),
(1,'try44'),
(2,'egweg'),
(2,'fgwetg5'),
(3,'dsgwegt'),
(3,'45t235t'),
(3,'gwergg'),
(5,'etgeg'),
(5,'efgwetg5')

ANSWER
------
select p.name as product_name, count(product_id) as total_requests 
from products as p
inner join requests as r
on p.id=r.product_id
where is_available=1
group by name
order by total_requests desc;

Question - 5 - Active Campaign Engagement Report
------------------------------------------------

create table 

INSERT INTO campaigns (id, name, is_active) VALUES
(1, 'SummerSavings', 1),
(2, 'FallFrenzy', 1),
(3, 'WinterWonderland', 0);

INSERT INTO engagements (campaign_id, views, clicks) VALUES
(1, 100, 10),
(1, 150, 20),
(2, 200, 30),
(2, 250, 40),
(3, 300, 50),
(1, 120, 15),
(2, 180, 25),
(3, 220, 35),
(1, 130, 18),
(2, 210, 28);

ANSWER
------
select c.name ,
count(e.campaign_id) as total_engagements,
sum(e.views+e.clicks) as total_views_and_likes
from campaigns as c
inner join engagements as e
on c.id=e.campaign_id
where is_active = 1
group by c.name
order by c.name asc;

Question - 6 : Tax Report Summary
---------------------------------

create table accounts(
	id int not null primary key,
	email varchar(255)
)

create table reports(
account_id int  references accounts(id),
dt varchar(19),
amount decimal(6,2)
)

INSERT INTO accounts (id, email) VALUES
(1, 'hratke0@disqus.com'),
(2, 'lcaiger1@si.edu'),
(3, 'gburkett2@vinaora.com');

INSERT INTO reports (account_id, dt, amount) VALUES
(1, '2023-05-27 01:46:19', 830.45),
(2, '2023-01-15 09:23:21', 2518.18),
(3, '2023-05-08 01:44:41', 4637.39),
(1, '2023-06-30 15:02:03', 3953.69),
(2, '2023-12-05 04:39:31', 3357.99),
(3, '2023-02-03 09:41:00', 1907.38),
(1, '2022-12-30 04:05:57', 1217.29),
(2, '2024-01-24 14:18:07', 2441.66),
(3, '2024-01-05 23:19:31', 3055.20),
(1, '2023-05-26 01:54:24', 2077.36);

ANSWER
------

SELECT a.email, sum(amount) as total_report_amount
FROM accounts a
JOIN reports r ON a.id = r.account_id
WHERE EXTRACT(YEAR FROM CAST(r.dt AS TIMESTAMP)) = 2023
GROUP BY a.email;

Question - 7 Antivirus Device Scan Report
-----------------------------------------

create table devices (
id int not null primary key,
mac_address varchar(255)
)

create table scanned_files(
device_id int references devices(id),
filename varchar(255),
is_infected smallint
)

INSERT INTO devices (id, mac_address) VALUES
(1, '66-0F-84-41-B8-8E'),
(2, 'A6-1A-2F-3A-7B-83'),
(3, '76-CD-24-48-F0-DD');


